# Rust-Python Binding Interface Contract

**Version**: 1.0
**Created**: 2025-10-03

## Python Module Interface

### Module: loco_bindings

The Rust library is exposed as a Python module named `loco_bindings` with the following functions:

### 1. generate_model(params: dict) -> dict

Generate a model and migration.

**Parameters**:
```python
params = {
    "model_name": str,           # Required: Model name
    "fields": List[str],         # Required: Field definitions
    "project_path": str = "."    # Optional: Project directory
}
```

**Returns**:
```python
{
    "success": bool,
    "created_files": List[dict], # [{"path": str, "type": str, "size_bytes": int}]
    "modified_files": List[dict],# [{"path": str, "type": str}]
    "errors": List[dict]         # [{"code": str, "message": str, "field": Optional[str]}]
}
```

**Python Exception Handling**:
```python
try:
    result = loco_bindings.generate_model({
        "model_name": "product",
        "fields": ["name:string", "price:i32"]
    })
    if result["success"]:
        print(f"Created {len(result['created_files'])} files")
    else:
        for error in result["errors"]:
            print(f"Error: {error['message']}")
except ValueError as e:
    print(f"Validation error: {e}")
except RuntimeError as e:
    print(f"Runtime error: {e}")
```

### 2. generate_scaffold(params: dict) -> dict

Generate complete CRUD scaffolding.

**Parameters**:
```python
params = {
    "model_name": str,           # Required: Model name
    "fields": List[str],         # Required: Field definitions
    "include_views": bool = True,    # Optional: Generate views
    "include_controllers": bool = True, # Optional: Generate controllers
    "api_only": bool = False,    # Optional: API-only mode
    "project_path": str = "."    # Optional: Project directory
}
```

**Returns**: Same format as `generate_model`

### 3. generate_controller_view(params: dict) -> dict

Generate controller and views for existing model.

**Parameters**:
```python
params = {
    "model_name": str,           # Required: Existing model name
    "actions": List[str] = ["index", "show", "create", "update", "delete"],
    "view_types": List[str] = ["list", "show", "form", "edit"],
    "project_path": str = "."    # Optional: Project directory
}
```

**Returns**: Same format as `generate_model`

## Error Mapping

Rust `Result::Err` types are mapped to Python exceptions:

| Rust Error Type | Python Exception | Description |
|-----------------|------------------|-------------|
| `ValidationError` | `ValueError` | Input validation failed |
| `FileExistsError` | `FileExistsError` | Target file already exists |
| `PermissionError` | `PermissionError` | Insufficient permissions |
| `NotLocoProjectError` | `ValueError` | Not a valid loco-rs project |
| `TemplateError` | `RuntimeError` | Template processing failed |
| `IOError` | `OSError` | General I/O error |
| `Panic` | `RuntimeError` | Unexpected internal error |

## Data Type Mapping

| Rust Type | Python Type | Notes |
|-----------|-------------|-------|
| `String` | `str` | UTF-8 encoded |
| `PathBuf` | `str` | File path as string |
| `Vec<T>` | `list` | List of type T |
| `HashMap<K,V>` | `dict` | Dictionary mapping |
| `Option<T>` | `Optional[T]` | None if None, Some(T) otherwise |
| `Result<T,E>` | Return value or exception | Exceptions on Err |

## Performance Requirements

### Function Call Overhead
- Direct Python → Rust call: <0.1ms
- Parameter serialization: <0.05ms
- Return value deserialization: <0.05ms
- Total binding overhead: <0.2ms

### Memory Usage
- Python objects: Minimal overhead
- Rust memory management: Automatic via PyO3
- No memory leaks: Proper reference counting

### Thread Safety
- GIL released during Rust operations
- Safe concurrent calls from multiple Python threads
- No shared mutable state between calls

## Build and Deployment

### Build Requirements
```toml
[dependencies]
pyo3 = { version = "0.20", features = ["extension-module"] }
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"

[lib]
name = "loco_bindings"
crate-type = ["cdylib"]
```

### Python Package Structure
```
loco_bindings/
├── __init__.py           # Generated by maturin
├── loco_bindings.so      # Compiled Rust library
└── pyproject.toml        # Package configuration
```

### Installation
```bash
# Development
maturin develop

# Production
maturin build --release
pip install target/wheels/loco_bindings-*.whl
```

## Testing Interface

### Unit Tests (Rust)
```rust
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_generate_model_validation() {
        // Test input validation
    }

    #[test]
    fn test_field_parsing() {
        // Test field definition parsing
    }
}
```

### Integration Tests (Python)
```python
import pytest
import loco_bindings
import tempfile
import os

def test_generate_model_success():
    with tempfile.TemporaryDirectory() as tmpdir:
        result = loco_bindings.generate_model({
            "model_name": "test_model",
            "fields": ["name:string"],
            "project_path": tmpdir
        })
        assert result["success"]
        assert len(result["created_files"]) == 2  # model + migration

def test_generate_model_invalid_name():
    with pytest.raises(ValueError):
        loco_bindings.generate_model({
            "model_name": "123invalid",
            "fields": ["name:string"]
        })
```

### Performance Tests
```python
import time
import loco_bindings

def test_performance_model_generation():
    start = time.time()
    result = loco_bindings.generate_model({
        "model_name": "perf_test",
        "fields": ["name:string", "value:i32"]
    })
    duration = time.time() - start

    assert result["success"]
    assert duration < 0.01  # <10ms requirement
```

## Version Compatibility

### Python Support
- Python 3.11+ (for modern type hints)
- PyPy 3.11+ (experimental)
- No Python 2 support

### Platform Support
- Linux (x86_64, ARM64)
- macOS (Intel, Apple Silicon)
- Windows (x86_64)

### Rust Support
- Rust 1.70+ (for PyO3 compatibility)
- Stable channel recommended
- MSVC toolchain on Windows
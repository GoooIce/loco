name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test-rust:
    name: Test Rust Bindings
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, beta]

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build Rust bindings
      run: |
        cd loco-bindings
        cargo build --verbose

    - name: Run Rust tests
      run: |
        cd loco-bindings
        cargo test --verbose

  test-python:
    name: Test Python Server
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.11", "3.12", "3.13"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install maturin[patchelf] pytest pytest-asyncio pytest-cov
        cd loco-mcp-server && pip install -e .[dev]
        cd ../loco-bindings && pip install -e .[dev]

    - name: Build and install Rust bindings
      run: |
        cd loco-bindings
        maturin develop --release

    - name: Check Python formatting
      run: |
        cd loco-mcp-server
        ruff check .
        ruff format --check .

    - name: Run Python tests
      run: |
        cd loco-mcp-server
        pytest tests/ -v --cov=src --cov-report=xml

    - name: Run Python type checking
      run: |
        cd loco-mcp-server
        mypy src/

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
      with:
        file: ./loco-mcp-server/coverage.xml
        flags: unittests
        name: codecov-umbrella

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-rust, test-python]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install loco CLI
      run: |
        cargo install loco-cli

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
          ~/.cache/pip
        key: ${{ runner.os }}-deps-${{ hashFiles('**/Cargo.lock', '**/pyproject.toml') }}

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install maturin[patchelf] pytest pytest-asyncio
        cd loco-mcp-server && pip install -e .[dev]
        cd ../loco-bindings && pip install -e .[dev]

    - name: Build and install
      run: |
        cd loco-bindings
        maturin develop --release

    - name: Run integration tests
      run: |
        cd loco-mcp-server
        pytest ../tests/test_integration_real_projects.py -v

    - name: Run performance tests
      run: |
        cd loco-mcp-server
        pytest ../tests/test_performance_validation.py -v -m "not slow"

  build-and-package:
    name: Build and Package
    runs-on: ${{ matrix.os }}
    needs: [test-rust, test-python]
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install maturin[patchelf]

    - name: Build wheels
      run: |
        cd loco-bindings
        maturin build --release --out dist --strip

    - name: Test installation
      run: |
        pip install dist/*.whl
        python -c "import loco_bindings; print('âœ… Installation successful')"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ runner.os }}
        path: loco-bindings/dist/

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build-and-package, integration-tests]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install maturin[patchelf]

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Build source distribution
      run: |
        cd loco-bindings
        maturin build --release --out dist --sdist

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        pip install twine
        twine upload dist/* --skip-existing